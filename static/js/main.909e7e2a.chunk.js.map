{"version":3,"sources":["components/Image.js","App.js","components/Api.js","reportWebVitals.js","index.js"],"names":["Image","src","this","props","React","Component","App","useState","query","setQuery","searchQ","setSearch","data","state","setState","useEffect","axios","get","then","LoadImages","searchData","results","SearchImages","console","log","className","type","placeholder","onChange","event","target","value","onClick","map","img","key","urls","thumb","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAQeA,E,4JANX,WACI,OACI,qBAAKC,IAAKC,KAAKC,MAAMF,U,GAHbG,IAAMC,WCwCXC,MArCf,WACE,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA6BF,qBAA7B,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,ECFR,WACI,MAA0BL,mBAAS,IAAnC,mBAAOM,EAAP,KAAcC,EAAd,KAaA,OAPAC,qBAAU,WACNC,IACKC,IAAI,0FACJC,MAAK,SAACN,GACHE,EAASF,EAAKA,WAEvB,CAfO,IAgBHC,EDZIM,GAMRC,ECSP,SAAsBZ,GAClB,MAA0BD,mBAAS,IAAnC,mBAAOM,EAAP,KAAcC,EAAd,KAaA,OAPAC,qBAAU,WACNC,IACKC,IAAI,gDAAgDT,EAAM,0DAC1DU,MAAK,SAACN,GACHE,EAASF,EAAKA,KAAKS,cAE5B,CAACb,IACGK,EDvBSS,CAAaZ,GAG/B,OAFAa,QAAQC,IAAIJ,GAIV,sBAAKK,UAAU,MAAf,UACE,qBAAKA,UAAU,UAAf,SACA,oDAEA,sBAAKA,UAAU,gBAAf,UACE,uBAAOC,KAAK,OAAOC,YAAY,qBAAqBC,SAAU,SAACC,GAAD,OAAUpB,EAASoB,EAAMC,OAAOC,UAC9F,wBAAQC,QAdA,WACZrB,EAAUH,IAaN,uBAEF,qBAAKiB,UAAU,UAAf,SACGf,EAAUU,EAAWa,KAAI,SAACC,EAAKC,GAAN,OACxB,cAAC,EAAD,CAAOlC,IAAKiC,EAAIE,KAAKC,OAAYF,MAC9BvB,EAAKqB,KAAI,SAACC,EAAKC,GAAN,OACZ,cAAC,EAAD,CAAOlC,IAAKiC,EAAIE,KAAKC,OAAYF,QAIrC,sBAAKV,UAAU,SAAf,yBACc,mBAAGa,KAAK,qDAAR,yBADd,gCEtBSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.909e7e2a.chunk.js","sourcesContent":["import React from 'react'\r\nclass Image extends React.Component{\r\n    render(){\r\n        return(\r\n            <img src={this.props.src}/>\r\n        )\r\n    }\r\n}\r\nexport default Image;","import { useState, useEffect } from 'react';\nimport { LoadImages , SearchImages } from \"./components/Api\";\nimport \"./App.css\";\nimport Image from \"./components/Image\";\nfunction App() {\n  const [query, setQuery] = useState()\n  const [searchQ, setSearch] = useState()\n  const data = LoadImages();\n  \n\n  const search =() => {\n    setSearch(query)\n  }\n const searchData = SearchImages(searchQ);\n  console.log(searchData)\n\n  return (\n    \n    <div className=\"App\">\n      <div className=\"heading\">\n      <h1>Image Finder App</h1>\n    </div>\n      <div className=\"search-button\">\n        <input type=\"text\" placeholder=\"Enter Image Title \" onChange={(event)=> setQuery(event.target.value)}/>\n        <button onClick={search}>Search</button>\n      </div>\n      <div className=\"contain\">\n        {searchQ ? searchData.map((img, key) => (\n          <Image src={img.urls.thumb} key={key}/>\n        )) : data.map((img, key) => (\n          <Image src={img.urls.thumb} key={key}/>\n        ))}\n      \n      </div>\n      <div className=\"footer\">\n        Designed by <a href=\"https://www.linkedin.com/in/shivam-jain-b5102b17a/\">SHIVAM JAIN</a> | All Rigths reserved\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\r\nimport axios from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nconst count = 1;    //declared to fetch the data only once.\r\n\r\nfunction LoadImages() {\r\n    const [state, setState] = useState([])\r\n    /*If we dont use useEffect than the api will be called a thousand times again and again.\r\n    for this we have componentdidmount in classbased component and useEffect in function based component*/\r\n  /*used count variable so that API is hited for only one time. useEffect function helps here as this is a function\r\n    based component. When we use class based component we use Componentdidmount(whenever a function is mounted, only once it is called) but here its a function based component\r\n    so useEffect is used.*/\r\n    useEffect(() => {\r\n        axios\r\n            .get(\"https://api.unsplash.com/photos/?client_id=S_PyoFvLnTZJg1UfAQjK3NtWZt_LLjFSWZOEuZnI4zw\")\r\n            .then((data) => {\r\n                setState(data.data);\r\n            })\r\n    }, [count])\r\n    return state;\r\n}\r\n\r\nfunction SearchImages(query) {\r\n    const [state, setState] = useState([])\r\n    /*If we dont use useEffect than the api will be called a thousand times again and again.\r\n    for this we have componentdidmount in classbased component and useEffect in function based component*/\r\n  /*used count variable so that API is hited for only one time. useEffect function helps here as this is a function\r\n    based component. When we use class based component we use Componentdidmount(whenever a function is mounted, only once it is called) but here its a function based component\r\n    so useEffect is used.*/\r\n    useEffect(() => {\r\n        axios\r\n            .get(\"https://api.unsplash.com/search/photos?query=\"+query+\"&client_id=S_PyoFvLnTZJg1UfAQjK3NtWZt_LLjFSWZOEuZnI4zw\")\r\n            .then((data) => {\r\n                setState(data.data.results)\r\n            })\r\n    }, [query])\r\n    return state;\r\n}\r\nexport { LoadImages , SearchImages }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}